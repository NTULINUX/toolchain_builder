#!/usr/bin/env bash
#
# Copyright (C) 2016 - 2018 Alec Ari <neotheuser@ymail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# printf because this is now a C program
printf "\\n\\tNTU's complete bleeding edge native x86/amd64 toolchain builder
\\tCopyright (C) 2016 - 2018 Alec Ari\\n"
sleep 3

# This is here to ensure we don't accidentally break something bad
printf "\\n\\tMaking sure we are not root...\\n"
if [[ "${EUID}" == 0 ]] ; then
	printf "\\tThis script must not be run as root.\\n\\tExiting.\\n"
	exit 1
else
	printf "\\tNot root. Good.\\n"
fi

# Environment sanity
unset STARTDIR
STARTDIR="${PWD}"

if [[ -w "${STARTDIR}" ]] ; then
	printf "\\n\\tUser has write permissions to %s\\n" "${STARTDIR}"
else
	printf "\\n\\tPlease switch to a user writeable directory, such as your home folder.\\n"
	exit 1
fi

# NOTICE: A value of 1 to the config file means true,
# while 0 means false. This logic is similar to:
# i.e. #define X_Y_Z 1 (for true) therefor NOT a typo

# Reduce lengthly printf lines
REPORT_BUG_EXIT="Please report bug to script maintainer. Exiting."

TOOLCHAIN_INTERNAL_CONFIG="${STARTDIR}/toolchain_internal.config"
TOOLCHAIN_USER_CONFIG="${STARTDIR}/toolchain_user.config"

# Load user config if present, error out if not
printf "\\n\\tChecking for pre-existing user config file...\\n"
if [[ -f "${TOOLCHAIN_USER_CONFIG}" ]] ; then
	printf "\\tConfig file found. Loading...\\n"
	# shellcheck source=/dev/null
	source "${TOOLCHAIN_USER_CONFIG}"
	printf "\\tLoaded.\\n"
else
	printf "\\tError: User config file not found. Exiting.\\n"
	exit 1
fi

# You shouldn't (need to) modify these
TOOLCHAIN_SRCDIR="${STARTDIR}/toolchain-src"
TOOLCHAIN_BINDIR="${STARTDIR}/toolchain-bin"
TOOLCHAIN_PATCHDIR="${STARTDIR}/patches"

# Load internal config if present, generate one if not
printf "\\n\\tChecking for pre-existing internal config file...\\n"
if [[ -f "${TOOLCHAIN_INTERNAL_CONFIG}" ]] ; then
	printf "\\tConfig file found. Loading...\\n"
	# shellcheck source=/dev/null
	source "${TOOLCHAIN_INTERNAL_CONFIG}"
	printf "\\tLoaded.\\n"
else
	printf "\\tGenerating internal config file...\\n"
	printf "# Automatically generated file; Please edit with caution.\\n\\n" &> "${TOOLCHAIN_INTERNAL_CONFIG}"
fi

#
# Environmental sanity checks
#

sanity_check()
{
# Redirect stdout (1) and stderr (2) to /dev/null (keep quiet)
# print error if type fails and exit with >0 exit status
if [[ ${SYSTEM_OK} == 1 ]] ; then
	printf "\\n\\tSystem already checked for prerequisites, all ok.\\n"
else
	printf "\\n\\tChecking system for prerequisites...\\n"

	type make > /dev/null 2>&1 || \
	{
		printf "\\tCannot find make. Exiting.\\n" ; exit 1 ;
	}

	type gcc > /dev/null 2>&1 || \
	{
		printf "\\tCannot find GCC. Exiting.\\n" ; exit 1 ;
	}

	type g++ > /dev/null 2>&1 || \
	{
		printf "\\tCannot find G++. Exiting.\\n" ; exit 1 ;
	}

	type ld > /dev/null 2>&1 || \
	{
		printf "\\tPlease install Binutils. Exiting.\\n" ; exit 1 ;
	}

	type libtool > /dev/null 2>&1 || \
	{
		printf "\\tCannot find libtool. Exiting.\\n" ; exit 1 ;
	}

	type wget > /dev/null 2>&1 || \
	{
		printf "\\tCannot find wget. Exiting.\\n" ; exit 1 ;
	}

	type git > /dev/null 2>&1 || \
	{
		printf "\\tCannot find git. Exiting.\\n" ; exit 1 ;
	}

	type patch > /dev/null 2>&1 || \
	{
		printf "\\tCannot find patch. Exiting.\\n" ; exit 1 ;
	}

	type autoconf > /dev/null 2>&1 || \
	{
		printf "\\tCannot find autoconf. Exiting.\\n" ; exit 1 ;
	}

	type automake > /dev/null 2>&1 || \
	{
		printf "\\tCannot find automake. Exiting.\\n" ; exit 1 ;
	}

	type grep > /dev/null 2>&1 || \
	{
		printf "\\tCannot find grep. Exiting.\\n" ; exit 1 ;
	}

	type gawk > /dev/null 2>&1 || \
	{
		printf "\\tCannot find gawk. Exiting.\\n" ; exit 1 ;
	}

	type sed > /dev/null 2>&1 || \
	{
		printf "\\tCannot find sed. Exiting.\\n" ; exit 1 ;
	}

	type m4 > /dev/null 2>&1 || \
	{
		printf "\\tCannot find m4. Exiting.\\n" ; exit 1 ;
	}

	printf "\\tObvious required tools found.\\n"

# Only x86/amd64 are supported due to GCC hard links
# See function check_ld_linker_path for more info
# I'm also not interested in testing this on other architectures
	printf "\\n\\tDetecting kernel bitness...\\n"
	ARCH_UNAME=$(uname -m)
	if [[ ${ARCH_UNAME} == *64 ]] ; then
		printf "\\t64-bit\\n"
	elif [[ ${ARCH_UNAME} == *86 ]] ; then
		printf "\\t32-bit\\n"
	else
		printf "\\tUnable to detect bitness.
\\tOnly x86 and amd64 platforms supported.\\n"
		exit 1
	fi
	SYSTEM_OK=1
	printf 'ARCH_UNAME="%s"\n' "${ARCH_UNAME}" >> "${TOOLCHAIN_INTERNAL_CONFIG}"
	printf '\nSYSTEM_OK="%s"\n' "${SYSTEM_OK}" >> "${TOOLCHAIN_INTERNAL_CONFIG}"
fi

# Definitely not the best way to check, but it works
if [[ "${GENTOO_PASS}" == 1 || "${GENERIC_TRUE}" == 1 ]] ; then
	printf "\\n\\tSystem already passed compiler check.\\n"
else
	printf "\\n\\tIs this a Gentoo system?\\n"
	if [[ $(ls /etc/env.d/gcc/config*) ]] ; then
		printf "\\tYes. Testing the build environment...\\n"
		GCC_ENV_CONF=$(cat /etc/env.d/gcc/config*)
		MAKE_PROFILE_TEST=$(ls -la /etc/portage/make.profile)
		if [[ "${GCC_ENV_CONF}" == *vanilla || "${MAKE_PROFILE_TEST}" != *hardened* ]] ; then
			printf "\\tGood, vanilla toolchain.\\n"
			GENTOO_PASS="1"
			printf '\nGENTOO_PASS="%s"\n' "${GENTOO_PASS}" >> "${TOOLCHAIN_INTERNAL_CONFIG}"
		elif [[ "${MAKE_PROFILE_TEST}" == *hardened* ]] ; then
			printf "\\tNot vanilla GCC, this may cause a GCC build failure
\\tas -fPIC and potentially other CFLAGS are known to issues.
\\tYou may comment the following line out at your own risk. If you do,
\\tplease report your success, your feedback is greatly appreciated.\\n"
			exit 1
		else
			printf "\\tError detecting the build environment.\\n\\t%s\\n" "${REPORT_BUG_EXIT}"
			exit 1
		fi
	else
		printf "\\tNo, assuming working toolchain.\\n"
		GENERIC_TRUE="1"
		printf '\nGENERIC_TRUE="%s"\n' "${GENERIC_TRUE}" >> "${TOOLCHAIN_INTERNAL_CONFIG}"
	fi
fi
}

#
# End of sanity checks
#

# If complete toolchain already exists, do not clean
# If interrupted, always do a fresh restart
if [[ -d "${TOOLCHAIN_BINDIR}" && "${TOOLCHAIN_COMPLETE}" != 1 && "${DEVELOPER_MODE}" != 1 ]] ; then
	printf "\\n\\t%s found.
\\tToolchain build hung up unexpectedly.\\n
\\tDeleting %s in 10 seconds.\\n
\\tThis action cannot be undone!
\\tPress Control+C to cancel.
\\t10.\\n" "${TOOLCHAIN_BINDIR}" "${TOOLCHAIN_BINDIR}"
	sleep 1
	printf "\\t9.\\n"
	sleep 1
	printf "\\t8.\\n"
	sleep 1
	printf "\\t7.\\n"
	sleep 1
	printf "\\t6.\\n"
	sleep 1
	printf "\\t5.\\n"
	sleep 1
	printf "\\t4.\\n"
	sleep 1
	printf "\\t3.\\n"
	sleep 1
	printf "\\t2.\\n"
	sleep 1
	printf "\\t1.\\n"
	sleep 1
	printf "\\tCleaning up...\\n\\n"
	rm -rf "${TOOLCHAIN_BINDIR}"
	printf "\\tFinished. Please restart the script.\\n"
	exit 0
elif [[ -d "${TOOLCHAIN_BINDIR}" && "${TOOLCHAIN_COMPLETE}" == 1 ]] ; then
	printf "\\n\\tToolchain already built.\\n
\\t%s and\\n\\t%s must be manually removed to proceed.
\\tNothing to do. Exiting.\\n" "${TOOLCHAIN_BINDIR}" "${TOOLCHAIN_INTERNAL_CONFIG}"
	exit 0
fi

# unset in case set previously
unset CFLAGS
unset CXXFLAGS
unset LDFLAGS

#
# DO NOT MODIFY
#

BINUTILS_TOOLCHAIN_SRCDIR="${TOOLCHAIN_SRCDIR}/binutils"
GLIBC_TOOLCHAIN_SRCDIR="${TOOLCHAIN_SRCDIR}/glibc"
GCC_TOOLCHAIN_SRCDIR="${TOOLCHAIN_SRCDIR}/gcc"
GMP_TOOLCHAIN_SRCDIR="${TOOLCHAIN_SRCDIR}/gmp"
MPFR_TOOLCHAIN_SRCDIR="${TOOLCHAIN_SRCDIR}/mpfr"
MPC_TOOLCHAIN_SRCDIR="${TOOLCHAIN_SRCDIR}/mpc"
ISL_TOOLCHAIN_SRCDIR="${TOOLCHAIN_SRCDIR}/isl"

BINUTILS_GIT="git://sourceware.org/git/binutils-gdb.git"
GLIBC_GIT="git://sourceware.org/git/glibc.git"
GCC_GIT="git://gcc.gnu.org/git/gcc.git"

# Reduce bandwidth, speed up the cloning process
BINUTILS_GIT_OPTS=(--depth"="1 -b "${BINUTILS_GIT_BRANCH}")
GLIBC_GIT_OPTS=(--depth"="1 -b "${GLIBC_GIT_BRANCH}")
GCC_GIT_OPTS=(--depth"="1 -b "${GCC_GIT_BRANCH}")

LINUX_TOOLCHAIN_SRCDIR="${TOOLCHAIN_SRCDIR}/linux-${LINUX_VER}"
LINUX_LOC="https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-${LINUX_VER}.tar.xz"

GMP_LOC="http://ftpmirror.gnu.org/gnu/gmp/gmp-${GMP_VER}.tar.xz"
MPFR_LOC="http://www.mpfr.org/mpfr-current/mpfr-${MPFR_VER}.tar.xz"
MPC_LOC="http://ftpmirror.gnu.org/gnu/mpc/mpc-${MPC_VER}.tar.gz"
ISL_LOC="http://isl.gforge.inria.fr/isl-${ISL_VER}.tar.xz"

# Fixes stupid, highly annoying and also fatal, libstdc++-v3 PIC compiling error
# They should really mainline this patch as static builds are currently broken
GCC_PIC_PATCH="${TOOLCHAIN_PATCHDIR}/gcc-libstdc-pic.patch"

#
# End of editing notice
#

#
# Fetch any required sources
#

fetch_sources ()
{
	cd "${TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tError changing directory to %s.\\n\\t%s\\n" \
		"${TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	printf "\\n\\tFetching sources if needed...\\n"

if [[ ! -d "${BINUTILS_TOOLCHAIN_SRCDIR}" ]] ; then
	printf "\\n\\tFetching Binutils via git...\\n"
	git clone "${BINUTILS_GIT_OPTS[@]}" "${BINUTILS_GIT}" "${BINUTILS_TOOLCHAIN_SRCDIR}"
fi

if [[ ! -d "${GLIBC_TOOLCHAIN_SRCDIR}" ]] ; then
	printf "\\n\\tFetching GLIBC via git...\\n"
	git clone "${GLIBC_GIT_OPTS[@]}" "${GLIBC_GIT}" "${GLIBC_TOOLCHAIN_SRCDIR}"
fi

if [[ ! -d "${GCC_TOOLCHAIN_SRCDIR}" ]] ; then
	printf "\\n\\tFetching GCC via git...\\n"
	git clone "${GCC_GIT_OPTS[@]}" "${GCC_GIT}" "${GCC_TOOLCHAIN_SRCDIR}"
fi

if [[ ! -f "${TOOLCHAIN_SRCDIR}"/linux-"${LINUX_VER}".tar.xz ]] ; then
	printf "\\n\\tDownloading Linux sources via wget...\\n"
	wget -c "${LINUX_LOC}" || \
	{
		printf "\\tError downloading Linux-%s. Exiting.\\n" \
		"${LINUX_VER}" ; exit 1 ;
	}
fi

if [[ ! -f "${TOOLCHAIN_SRCDIR}"/gmp-"${GMP_VER}".tar.xz ]] ; then
	printf "\\tDownloading GMP via wget...\\n"
	wget -c ${GMP_LOC} || \
	{
		printf "\\tError downloading GMP-%s. Exiting.\\n" \
		"${GMP_VER}" ; exit 1 ;
	}
fi

if [[ ! -f "${TOOLCHAIN_SRCDIR}"/mpfr-"${MPFR_VER}".tar.xz ]] ; then
	printf "\\tDownloading MPFR via wget...\\n"
	wget -c ${MPFR_LOC} || \
	{
		printf "\\tError downloading MPFR-%s. Exiting.\\n" \
		"${MPFR_VER}" ; exit 1 ;
	}
fi

if [[ ! -f "${TOOLCHAIN_SRCDIR}"/mpc-"${MPC_VER}".tar.gz ]] ; then
	printf "\\tDownloading MPC via wget...\\n"
	wget -c ${MPC_LOC} || \
	{
		printf "\\tError downloading MPC-%s.\\n Exiting.\\n" \
		"${MPC_VER}" ; exit 1 ;
	}
fi

if [[ ! -f "${TOOLCHAIN_SRCDIR}"/isl-"${ISL_VER}".tar.xz ]] ; then
	printf "\\tDownloading ISL via wget...\\n"
	wget -c ${ISL_LOC} || \
	{
		printf "\\tError downloading ISL-%s.\\n Exiting.\\n" \
		"${ISL_VER}" ; exit 1 ;
	}
fi
}

#
# End of fetch sources
#

#
# Unpack any required sources
#

unpack_sources ()
{
	printf "\\tUnpacking any sources if needed...\\n"

if [[ ! -d "${LINUX_TOOLCHAIN_SRCDIR}" ]] ; then
	printf "\\n\\tDecompressing Linux sources...\\n"
	tar xf "${TOOLCHAIN_SRCDIR}"/linux-"${LINUX_VER}".tar.xz -C "${TOOLCHAIN_SRCDIR}"/
fi

if [[ ! -d "${GMP_TOOLCHAIN_SRCDIR}" ]] ; then
	printf "\\n\\tDecompressing GMP...\\n"
	tar xf "${TOOLCHAIN_SRCDIR}"/gmp-"${GMP_VER}".tar.xz -C "${TOOLCHAIN_SRCDIR}"/
	mv -v "${TOOLCHAIN_SRCDIR}"/gmp-"${GMP_VER}" "${GMP_TOOLCHAIN_SRCDIR}"
fi

if [[ ! -d "${MPFR_TOOLCHAIN_SRCDIR}" ]] ; then
	printf "\\n\\tDecompressing MPFR...\\n"
	tar xf "${TOOLCHAIN_SRCDIR}"/mpfr-"${MPFR_VER}".tar.xz -C "${TOOLCHAIN_SRCDIR}"/
	mv -v "${TOOLCHAIN_SRCDIR}"/mpfr-"${MPFR_VER}" "${MPFR_TOOLCHAIN_SRCDIR}"
fi

if [[ ! -d "${MPC_TOOLCHAIN_SRCDIR}" ]] ; then
	printf "\\n\\tDecompressing MPC...\\n"
	tar zxf "${TOOLCHAIN_SRCDIR}"/mpc-"${MPC_VER}".tar.gz -C "${TOOLCHAIN_SRCDIR}"/
	mv -v "${TOOLCHAIN_SRCDIR}"/mpc-"${MPC_VER}" "${MPC_TOOLCHAIN_SRCDIR}"
fi

if [[ ! -d "${ISL_TOOLCHAIN_SRCDIR}" ]] ; then
	printf "\\n\\tDecompressing ISL...\\n"
	tar xf "${TOOLCHAIN_SRCDIR}"/isl-"${ISL_VER}".tar.xz -C "${TOOLCHAIN_SRCDIR}"/
	mv -v "${TOOLCHAIN_SRCDIR}"/isl-"${ISL_VER}" "${ISL_TOOLCHAIN_SRCDIR}"
fi
}

#
# End of unpack sources
#

#
# Verify sources
#

verify_sources ()
{
	printf "\\n\\tVerifying sources...\\n"

	test -d "${LINUX_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.\\n\\t%s\\n" \
		"${LINUX_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${GMP_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.\\n\\t%s\\n" \
		"${GMP_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${MPFR_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.\\n\\t%s\\n" \
		"${MPFR_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${MPC_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.\\n\\t%s\\n" \
		"${MPC_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${ISL_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.\\n\\t%s\\n" \
		"${ISL_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${BINUTILS_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.\\n\\t%s\\n" \
		"${BINUTILS_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${GLIBC_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.\\n\\t%s\\n" \
		"${GLIBC_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${GCC_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.\\n\\t%s\\n" \
		"${GCC_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	printf "\\tAll sources verified.\\n"
}

#
# End of verify sources
#

#
# Update git sources
#

# We only clone a single branch, so changing branches later will not work
# Always do a fresh reset
update_binutils ()
{
	printf "\\n\\tUpdating Binutils...\\n"

	cd "${BINUTILS_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tError changing directory to %s.\\n\\t%s\\n" \
		"${BINUTILS_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	git reset --hard HEAD
	git checkout "${BINUTILS_GIT_BRANCH}"
	git pull
}

update_glibc ()
{
	printf "\\n\\tUpdating GLIBC...\\n"

	cd "${GLIBC_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tError changing directory to %s.\\n\\t%s\\n" \
		"${GLIBC_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	git reset --hard HEAD
	git checkout "${GLIBC_GIT_BRANCH}"
	git pull
}

update_gcc ()
{
	printf "\\n\\tUpdating GCC...\\n"

	cd "${GCC_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tError changing directory to %s.\\n\\t%s\\n" \
		"${GCC_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	git reset --hard HEAD
	git checkout "${GCC_GIT_BRANCH}"
	git pull
}

update_sources ()
{
if [[ -d "${BINUTILS_TOOLCHAIN_SRCDIR}" && -d "${GLIBC_TOOLCHAIN_SRCDIR}" && -d "${GCC_TOOLCHAIN_SRCDIR}" ]] ; then
	update_binutils
	update_glibc
	update_gcc
else
	printf "\\n\\tUnexpected error: Cannot find git sources.\\n\\t%s\\n" "${REPORT_BUG_EXIT}"
	exit 1
fi
}

#
# End of update git sources
#

init_toolchain_srcdir ()
{
	printf "\\n\\tCreating source work directory...\\n"

	# In case of wonky config file, we always double check
	mkdir -p "${TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tFailed to create %s. Exiting.\\n" \
		"${TOOLCHAIN_SRCDIR}" ; exit 1 ;
	}

}

printf "\\n\\tChecking if %s exists...\\n" "${TOOLCHAIN_SRCDIR}"
if [[ -d "${TOOLCHAIN_SRCDIR}" ]] ; then
	printf "\\tIt does.\\n"
else
	printf "\\tIt does not, must be your first rodeo.\\n
\\tWelcome! I really hope this script works for you.
\\tPlease report any bugs to the author of this program.\\n"
	init_toolchain_srcdir
fi

main ()
{
	sanity_check

	fetch_sources

	unpack_sources

	verify_sources

	update_sources
}

#
# This is where the building starts
#

# Create lib64 dir and a lib symlink to it if 64-bit,
# otherwise just make lib dir.
prepare_libdir()
{
	printf "\\n\\tPreparing toolchain libdir...\\n"
if [[ "${ARCH_UNAME}" == *64 ]] ; then
	if [[ ! -d "${TOOLCHAIN_BINDIR}"/usr/lib64 ]] ; then

		mkdir -p "${TOOLCHAIN_BINDIR}"/usr/lib64 || \
		{
			printf "\\tError creating ${TOOLCHAIN_BINDIR}/usr/lib64.\\n\\t%s\\n" \
			"${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		printf "\\tSetting TOOLCHAIN_LIBDIR...\\n"
		TOOLCHAIN_LIBDIR="${TOOLCHAIN_BINDIR}/usr/lib64"

		printf "\\tCreating symlink...\\n"
		ln -sfv "${TOOLCHAIN_BINDIR}"/usr/lib64 "${TOOLCHAIN_BINDIR}"/usr/lib
	fi
elif [[ ${ARCH_UNAME} == *86 ]] ; then
	if [[ ! -d ${TOOLCHAIN_BINDIR}/usr/lib ]] ; then

		mkdir -p "${TOOLCHAIN_BINDIR}"/usr/lib || \
		{
			printf "\\tError creating ${TOOLCHAIN_BINDIR}/usr/lib.\\n\\t%s\\n" \
			"${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		printf "\\tSetting TOOLCHAIN_LIBDIR...\\n"
		TOOLCHAIN_LIBDIR="${TOOLCHAIN_BINDIR}/usr/lib"
	fi
fi
}

# Copy MPC, MPFR, GMP and ISL to Binutils srcdir
prepare_binutils ()
{
	printf "\\n\\tCopying required libraries to Binutils if needed.\\n"
if [[ ! -d "${BINUTILS_TOOLCHAIN_SRCDIR}"/gmp ]] ; then
	printf "\\tCopying GMP to Binutils...\\n"

	cp -pr "${GMP_TOOLCHAIN_SRCDIR}" "${BINUTILS_TOOLCHAIN_SRCDIR}"/ || \
	{
		printf "\\tError copying GMP to Binutils.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

if [[ ! -d ${BINUTILS_TOOLCHAIN_SRCDIR}/mpfr ]] ; then
	printf "\\tCopying MPFR to Binutils...\\n"

	cp -pr "${MPFR_TOOLCHAIN_SRCDIR}" "${BINUTILS_TOOLCHAIN_SRCDIR}"/ || \
	{
		printf "\\tError copying MPFR to Binutils.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

if [[ ! -d ${BINUTILS_TOOLCHAIN_SRCDIR}/mpc ]] ; then
	printf "\\tCopying MPC to Binutils...\\n"

	cp -pr "${MPC_TOOLCHAIN_SRCDIR}" "${BINUTILS_TOOLCHAIN_SRCDIR}"/ || \
	{
		printf "\\tError copying MPC to Binutils.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

if [[ ! -d ${BINUTILS_TOOLCHAIN_SRCDIR}/isl ]] ; then
	printf "\\tCopying ISL to Binutils...\\n"

	cp -pr "${ISL_TOOLCHAIN_SRCDIR}" "${BINUTILS_TOOLCHAIN_SRCDIR}"/ || \
	{
		printf "\\tError copying ISL to Binutils.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi
}

# GLIBC hard code fix
check_glibc_hardcode ()
{
	X86_64_LDCONFIG="${GLIBC_TOOLCHAIN_SRCDIR}/sysdeps/unix/sysv/linux/x86_64/ldconfig.h"

if [[ "${GLIBC_HARDCODE_FIXED}" == "1" ]] ; then
	printf "\\tGLIBC hard code fix already applied.\\n"
else
	# Change hard link from /{lib,lib64} to $TOOLCHAIN_LIBDIR
	printf "\\tGLIBC hard code fix not applied, attempting to fix via sed...\\n"

	sed "s#/lib/ld-linux.so.2#${TOOLCHAIN_LIBDIR}/ld-linux.so.2#g" -i "${X86_64_LDCONFIG}" || \
	{
		printf "\\tApplying 32-bit hard code fix failed.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	sed "s#/lib64/ld-linux-x86-64.so.2#${TOOLCHAIN_LIBDIR}/ld-linux-x86-64.so.2#g" -i "${X86_64_LDCONFIG}" || \
	{
		printf "\\tApplying 64-bit hard code fix failed.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	printf "\\tGLIBC hard code fix now applied.\\n"
	GLIBC_HARDCODE_FIXED="1"
	printf '\nGLIBC_HARDCODE_FIXED="%s"\n' "${GLIBC_HARDCODE_FIXED}" >> "${TOOLCHAIN_INTERNAL_CONFIG}"
fi
}

#
# Prepare GCC
#

# May break with future GCC updates
# Fixes GCC bug #58638
check_gcc_pic_patch ()
{
if [[ "${GCC_PIC_PATCH_APPLIED}" == "1" ]] ; then
	printf "\\tlibstdc++-v3 PIC patch already applied.\\n"
else
	printf "\\tApplying libstdc++-v3 PIC patch...\\n"

	cd "${GCC_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tError changing directory to %s.\\n\\t%s\\n" \
		"${GCC_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	patch -p1 < "${GCC_PIC_PATCH}" || \
	{
		printf "\\tlibstdc++-v3 PIC patch failed.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	printf "\\tlibstdc++-v3 PIC patch now applied.\\n"
	GCC_PIC_PATCH_APPLIED="1"
	printf '\nGCC_PIC_PATCH_APPLIED="%s"\n' "${GCC_PIC_PATCH_APPLIED}" >> "${TOOLCHAIN_INTERNAL_CONFIG}"
fi
}

check_ld_linker_path ()
{
	GCC_CONF_32_H="${GCC_TOOLCHAIN_SRCDIR}/gcc/config/i386/linux.h"
	GCC_CONF_64_H="${GCC_TOOLCHAIN_SRCDIR}/gcc/config/i386/linux64.h"

if [[ "${LD_LINKER_PATH_FIXED}" == "1" ]] ; then
	printf "\\tGCC linker fix already applied.\\n"
else
	printf "\\tApplying GCC linker fix...\\n"
	sed "s#/lib/ld-linux.so.2#${TOOLCHAIN_LIBDIR}/ld-linux.so.2#g" -i "${GCC_CONF_32_H}" || \
	{
		printf "\\tApplying 32-bit linker fix failed.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	sed "s#/lib64/ld-linux-x86-64.so.2#${TOOLCHAIN_LIBDIR}/ld-linux-x86-64.so.2#g" -i "${GCC_CONF_64_H}" || \
	{
		printf "\\tApplying 64-bit linker fix failed.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	LD_LINKER_PATH_FIXED="1"
	printf '\nLD_LINKER_PATH_FIXED="%s"\n' "${LD_LINKER_PATH_FIXED}" >> "${TOOLCHAIN_INTERNAL_CONFIG}"
	printf "\\tGCC linker fixes now applied.\\n"
fi
}

prepare_gcc ()
{
	check_gcc_pic_patch
	check_ld_linker_path

	printf "\\n\\tCopying required libraries to GCC if needed.\\n"
if [[ ! -d "${GCC_TOOLCHAIN_SRCDIR}"/gmp ]] ; then
	printf "\\tCopying GMP to GCC...\\n"

	cp -pr "${GMP_TOOLCHAIN_SRCDIR}" "${GCC_TOOLCHAIN_SRCDIR}"/ || \
	{
		printf "\\tError copying GMP to GCC.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

if [[ ! -d "${GCC_TOOLCHAIN_SRCDIR}"/mpfr ]] ; then
	printf "\\tCopying MPFR to GCC...\\n"

	cp -pr "${MPFR_TOOLCHAIN_SRCDIR}" "${GCC_TOOLCHAIN_SRCDIR}"/ || \
	{
		printf "\\tError copying MPFR to GCC.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

if [[ ! -d "${GCC_TOOLCHAIN_SRCDIR}"/mpc ]] ; then
	printf "\\tCopying MPC to GCC...\\n"

	cp -pr "${MPC_TOOLCHAIN_SRCDIR}" "${GCC_TOOLCHAIN_SRCDIR}"/ || \
	{
		printf "\\tError copying MPC to GCC.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

if [[ ! -d "${GCC_TOOLCHAIN_SRCDIR}"/isl ]] ; then
	printf "\\tCopying ISL to GCC...\\n"

	cp -pr "${ISL_TOOLCHAIN_SRCDIR}" "${GCC_TOOLCHAIN_SRCDIR}"/ || \
	{
		printf "\\tError copying ISL to GCC.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi
}

#
# End of GCC preparation
#

#
# Linux kernel headers
#

# Always make sure headers are sanitized
install_linux_headers ()
{
	printf "\\n\\tInstalling kernel headers to %s...\\n" "${TOOLCHAIN_BINDIR}"/usr/include
	sleep 1

	cd "${LINUX_TOOLCHAIN_SRCDIR}" || \
	{
		printf "\\tError changing directory to %s.\\n\\t%s\\n" \
		"${LINUX_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	make mrproper

if [[ ! -d "${LINUX_TOOLCHAIN_SRCDIR}/DESTDIR" ]] ; then
	mkdir -p "${LINUX_TOOLCHAIN_SRCDIR}"/DESTDIR
else
	rm -rf "${LINUX_TOOLCHAIN_SRCDIR}"/DESTDIR/*
fi

	make INSTALL_HDR_PATH="${LINUX_TOOLCHAIN_SRCDIR}/DESTDIR" headers_install

	mkdir -p "${TOOLCHAIN_BINDIR}"/usr/include || \
	{
		printf "\\tError creating %s/include. Exiting.\\n" \
		"${TOOLCHAIN_BINDIR}" ; exit 1 ;
	}

	cp -pr "${LINUX_TOOLCHAIN_SRCDIR}"/DESTDIR/include/* "${TOOLCHAIN_BINDIR}"/usr/include/ || \
	{
		printf "\\tError installing kernel headers. Exiting.\\n" ; exit 1 ;
	}
}

#
# End of installation of kernel headers
#

#
# First pass of Binutils
#

first_pass_binutils ()
{
	printf "\\n\\tBuilding first pass Binutils...\\n"
	sleep 1

	prepare_binutils

if [[ -d "${BINUTILS_TOOLCHAIN_SRCDIR}"/build ]] ; then

		cd "${BINUTILS_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError changing directory to %s.\\n\\t%s\\n" \
			"${BINUTILS_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		make distclean
		rm -rf "${BINUTILS_TOOLCHAIN_SRCDIR}"/build/*
else
		mkdir -p "${BINUTILS_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError creating %s.\\n\\t%s\\n" \
			"${BINUTILS_TOOLCHAIN_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		cd "${BINUTILS_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError changing directory to %s.\\n\\t%s\\n" \
			"${BINUTILS_TOOLCHAIN_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
		}
fi

	../configure \
	--prefix="${TOOLCHAIN_BINDIR}"/usr \
	--libdir="${TOOLCHAIN_LIBDIR}" \
	--enable-gold \
	--enable-lto \
	--with-isl \
	--disable-nls \
	--disable-gdb \
	--disable-werror \
	--disable-shared || \
	{
		printf "\\n\\tBinutils configure error. Exiting.\\n" ; exit 1 ;
	}

	make -j"${CORES}" || \
	{
		printf "\\n\\tBinutils compile error. Exiting.\\n" ; exit 1 ;
	}

	make install || \
	{
		printf "\\n\\tBinutils install error. Exiting.\\n" ; exit 1 ;
	}
}

#
# End of Binutils first pass
#

#
# First pass of GLIBC GNU C library
#

first_pass_glibc ()
{
	printf "\\n\\tBuilding first pass GLIBC...\\n"
	sleep 1

if [[ -d "${GLIBC_TOOLCHAIN_SRCDIR}"/build ]] ; then

		cd "${GLIBC_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError changing directory to %s.\\n\\t%s\\n" \
			"${GLIBC_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		make distclean
		rm -rf "${GLIBC_TOOLCHAIN_SRCDIR}"/build/*
else
		mkdir -p "${GLIBC_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError creating %s.\\n\\t%s\\n" \
			"${GLIBC_TOOLCHAIN_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		cd "${GLIBC_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError changing directory to %s.\\n\\t%s\\n" \
			"${GLIBC_TOOLCHAIN_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
		}
fi

	../configure \
	--prefix="${TOOLCHAIN_BINDIR}"/usr \
	--libdir="${TOOLCHAIN_LIBDIR}" \
	--with-binutils="${TOOLCHAIN_BINDIR}"/usr/bin \
	--with-headers="${TOOLCHAIN_BINDIR}"/usr/include || \
	{
		printf "\\n\\tGLIBC configure error. Exiting.\\n" ; exit 1 ;
	}

	make -j"${CORES}" || \
	{
		printf "\\n\\tGLIBC compile error. Exiting.\\n" ; exit 1 ;
	}

	make install || \
	{
		printf "\\n\\tGLIBC install error. Exiting.\\n" ; exit 1 ;
	}
}

#
# End of GLIBC first pass
#

#
# First pass of GCC
#

first_pass_gcc ()
{
	printf "\\n\\tBuilding first pass C/C++ compiler...\\n"
	sleep 1

	prepare_gcc

if [[ -d "${GCC_TOOLCHAIN_SRCDIR}"/build ]] ; then

		cd "${GCC_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError changing directory to %s.\\n\\t%s\\n" \
			"${GCC_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		make distclean
		rm -rf "${GCC_TOOLCHAIN_SRCDIR}"/build/*
else
		mkdir -p "${GCC_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError creating %s.\\n\\t%s\\n" \
			"${GCC_TOOLCHAIN_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		cd "${GCC_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError changing directory to %s.\\n\\t%s\\n" \
			"${GCC_TOOLCHAIN_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
		}
fi

	AR="${TOOLCHAIN_BINDIR}"/usr/bin/ar \
	AS="${TOOLCHAIN_BINDIR}"/usr/bin/as \
	LD="${TOOLCHAIN_BINDIR}"/usr/bin/ld \
	NM="${TOOLCHAIN_BINDIR}"/usr/bin/nm \
	OBJCOPY="${TOOLCHAIN_BINDIR}"/usr/bin/objcopy \
	OBJDUMP="${TOOLCHAIN_BINDIR}"/usr/bin/objdump \
	RANLIB="${TOOLCHAIN_BINDIR}"/usr/bin/ranlib \
	READELF="${TOOLCHAIN_BINDIR}"/usr/bin/readelf \
	STRIP="${TOOLCHAIN_BINDIR}"/usr/bin/strip \
	AR_FOR_TARGET="${TOOLCHAIN_BINDIR}"/usr/bin/ar \
	AS_FOR_TARGET="${TOOLCHAIN_BINDIR}"/usr/bin/as \
	LD_FOR_TARGET="${TOOLCHAIN_BINDIR}"/usr/bin/ld \
	NM_FOR_TARGET="${TOOLCHAIN_BINDIR}"/usr/bin/nm \
	OBJCOPY_FOR_TARGET="${TOOLCHAIN_BINDIR}"/usr/bin/objcopy \
	OBJDUMP_FOR_TARGET="${TOOLCHAIN_BINDIR}"/usr/bin/objdump \
	RANLIB_FOR_TARGET="${TOOLCHAIN_BINDIR}"/usr/bin/ranlib \
	READELF_FOR_TARGET="${TOOLCHAIN_BINDIR}"/usr/bin/readelf \
	STRIP_FOR_TARGET="${TOOLCHAIN_BINDIR}"/usr/bin/strip \
	../configure \
	--prefix="${TOOLCHAIN_BINDIR}"/usr \
	--with-local-prefix="${TOOLCHAIN_BINDIR}"/usr \
	--with-native-system-header-dir="${TOOLCHAIN_BINDIR}"/usr/include \
	--libdir="${TOOLCHAIN_LIBDIR}" \
	--enable-languages=c,c++ \
	--enable-gold \
	--enable-lto \
	--with-isl \
	--disable-nls \
	--disable-libatomic \
	--disable-libgomp \
	--disable-libmpx \
	--disable-libquadmath \
	--disable-libssp \
	--disable-libvtv  \
	--disable-libstdcxx-pch \
	--disable-libcilkrts \
	--disable-libitm \
	--disable-libsanitizer \
	--disable-multilib \
	--disable-werror \
	--disable-shared || \
	{
		printf "\\n\\tConfigure error. Exiting.\\n" ; exit 1 ;
	}

	make -j"${CORES}" || \
	{
		printf "\\n\\tCompile error. Exiting.\\n" ; exit 1 ;
	}

	make install || \
	{
		printf "\\n\\tInstall error. Exiting.\\n" ; exit 1 ;
	}
}

#
# End of GCC first pass
#

#
# Second pass of Binutils
#

second_pass_binutils ()
{
	printf "\\n\\tBuilding second pass Binutils...\\n"
	sleep 1

	prepare_binutils

if [[ -d "${BINUTILS_TOOLCHAIN_SRCDIR}"/build ]] ; then

		cd "${BINUTILS_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError changing directory to %s.\\n\\t%s\\n" \
			"${BINUTILS_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		make distclean
		rm -rf "${BINUTILS_TOOLCHAIN_SRCDIR}"/build/*
else
		mkdir -p "${BINUTILS_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError creating %s.\\n\\t%s\\n" \
			"${BINUTILS_TOOLCHAIN_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		cd "${BINUTILS_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError changing directory to %s.\\n\\t%s\\n" \
			"${BINUTILS_TOOLCHAIN_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
		}
fi

	# Eliminates the need for 500 lines here
	printf "\\n\\tUpdating PATH var...\\n"
	ORIG_PATH="${PATH}"
	NEW_PATH="${TOOLCHAIN_BINDIR}/usr/bin:${PATH}"
	PATH="${NEW_PATH}"
	printf "\\tPATH now has new toolchain set first.\\n"

	# --with-build-sysroot prevents linking to /usr
	# Not needed with GCC, already links to libs in ${TOOLCHAIN_LIBDIR}
	# Verified with ldd
	../configure \
	--with-build-sysroot="${TOOLCHAIN_BINDIR}" \
	--prefix="${TOOLCHAIN_BINDIR}"/usr \
	--libdir="${TOOLCHAIN_LIBDIR}" \
	--enable-gold \
	--enable-lto \
	--with-isl \
	--disable-gdb \
	--disable-werror \
	--disable-shared || \
	{
		printf "\\n\\tBinutils configure error. Exiting.\\n" ; exit 1 ;
	}

	make -j"${CORES}" || \
	{
		printf "\\n\\tBinutils compile error. Exiting.\\n" ; exit 1 ;
	}

	make install || \
	{
		printf "\\n\\tBinutils install error. Exiting.\\n" ; exit 1 ;
	}
}

#
# End of Binutils second pass
#

#
# Second pass of GLIBC GNU C library
#

# FIXME: Still uses some /usr libs (chroot env may be only fix)
second_pass_glibc ()
{
	printf "\\n\\tBuilding second pass GLIBC...\\n"
	sleep 1

	check_glibc_hardcode

if [[ -d "${GLIBC_TOOLCHAIN_SRCDIR}"/build ]] ; then

		cd "${GLIBC_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError changing directory to %s.\\n\\t%s\\n" \
			"${GLIBC_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		make distclean
		rm -rf "${GLIBC_TOOLCHAIN_SRCDIR}"/build/*
else
		mkdir -p "${GLIBC_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError creating %s.\\n\\t%s\\n" \
			"${GLIBC_TOOLCHAIN_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		cd "${GLIBC_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError changing directory to %s.\\n\\t%s\\n" \
			"${GLIBC_TOOLCHAIN_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
		}
fi

	# Half of these libraries still use /usr
	../configure \
	--prefix="${TOOLCHAIN_BINDIR}"/usr \
	--libdir="${TOOLCHAIN_LIBDIR}" \
	--with-headers="${TOOLCHAIN_BINDIR}"/usr/include || \
	{
		printf "\\n\\tGLIBC configure error. Exiting.\\n" ; exit 1 ;
	}

	make -j"${CORES}" || \
	{
		printf "\\n\\tGLIBC compile error. Exiting.\\n" ; exit 1 ;
	}

	make install || \
	{
		printf "\\n\\tGLIBC install error. Exiting.\\n" ; exit 1 ;
	}
}

#
# End of GLIBC second pass
#

#
# Second pass of GCC
#

second_pass_gcc ()
{
	printf "\\n\\tBuilding Second pass C/C++ compiler...\\n"
	sleep 1

	prepare_gcc

if [[ -d "${GCC_TOOLCHAIN_SRCDIR}"/build ]] ; then

		cd "${GCC_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError changing directory to %s.\\n\\t%s\\n" \
			"${GCC_TOOLCHAIN_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		make distclean
		rm -rf "${GCC_TOOLCHAIN_SRCDIR}"/build/*
else
		mkdir -p "${GCC_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError creating %s.\\n\\t%s\\n" \
			"${GCC_TOOLCHAIN_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
		}

		cd "${GCC_TOOLCHAIN_SRCDIR}"/build || \
		{
			printf "\\tError changing directory to %s.\\n\\t%s\\n" \
			"${GCC_TOOLCHAIN_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
		}
fi

	# libmpx fails to build (for now at least anyway, forget exact error)
	# libsanitizer may fail to build as well, turning off to be safe
	../configure \
	--prefix="${TOOLCHAIN_BINDIR}"/usr \
	--with-local-prefix="${TOOLCHAIN_BINDIR}"/usr \
	--with-native-system-header-dir="${TOOLCHAIN_BINDIR}"/usr/include \
	--libdir="${TOOLCHAIN_LIBDIR}" \
	--enable-languages=c,c++ \
	--enable-gold \
	--enable-lto \
	--with-isl \
	--disable-libmpx \
	--disable-libsanitizer \
	--disable-multilib \
	--disable-shared || \
	{
		printf "\\n\\tConfigure error. Exiting.\\n" ; exit 1 ;
	}

	make -j"${CORES}" || \
	{
		printf "\\n\\tCompile error. Exiting.\\n" ; exit 1 ;
	}

	make install || \
	{
		printf "\\n\\tInstall error. Exiting.\\n" ; exit 1 ;
	}
}

#
# End of GCC second pass
#

#
# Execute build
#

build_toolchain ()
{
	prepare_libdir

	install_linux_headers

	first_pass_binutils

	first_pass_glibc

	first_pass_gcc

	second_pass_binutils

	second_pass_glibc

	second_pass_gcc

	printf '\n\tToolchain built successfully! \n
\tTo add the toolchain to your PATH, simply run the following:
\texport PATH="%s/usr/bin:%s"\n
\tThen to make sure your new toolchain is in use, run:
\t"ld --version" and "gcc --version" without quotes.\\n
\tIf you would like to use the Gold linker by default,
\tRun the following:
\tln -sfv %s/usr/bin/ld.gold %s/usr/bin/ld\n' \
	"${TOOLCHAIN_BINDIR}" "${ORIG_PATH}" "${TOOLCHAIN_BINDIR}" "${TOOLCHAIN_BINDIR}"

	TOOLCHAIN_COMPLETE=1
	printf '\nTOOLCHAIN_COMPLETE="%s"\n' "${TOOLCHAIN_COMPLETE}" >> "${TOOLCHAIN_INTERNAL_CONFIG}"
}

main

build_toolchain

exit 0

#EOF
